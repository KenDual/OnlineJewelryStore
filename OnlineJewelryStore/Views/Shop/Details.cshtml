@model OnlineJewelryStore.ViewModels.Shop.ProductDetailsViewModel
@{
   ViewBag.Title = "Details";
   Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
   <style>
      /* Review Form Styling */
      .review-form .rating-input {
         font-size: 24px;
         margin-bottom: 10px;
      }

      .review-form .star-rating {
         cursor: pointer;
         color: #ccc;
         transition: color 0.2s;
      }

         .review-form .star-rating:hover {
            color: #f39c12;
         }

         .review-form .star-rating.fa-star {
            color: #f39c12;
         }

      .reviews-list-section h3,
      .review-form-section h3 {
         margin-bottom: 20px;
         font-size: 20px;
         font-weight: 600;
      }

      .review-count {
         font-size: 14px;
         color: #666;
         margin-left: 5px;
      }
   </style>
}

<!--== Page Title Area Start ==-->
<div id="page-title-area">
   <div class="container">
      <div class="row">
         <div class="col-12 text-center">
            <div class="page-title-content">
               <ul class="breadcrumb">
                  <li><a href="@Url.Action("Index", "Shop")">Shop</a></li>
                  <li>
                     <a href="@Url.Action("Index", "Shop", new { categoryId = Model.Product.CategoryID })">
                        @Model.Product.Category.CategoryName
                     </a>
                  </li>
                  <li><a href="#" class="active">@Model.Product.ProductName</a></li>
               </ul>
            </div>
         </div>
      </div>
   </div>
</div>
<!--== Page Title Area End ==-->
<!--== Page Content Wrapper Start ==-->
<div id="page-content-wrapper" class="p-9">
   <div class="ruby-container">
      <div class="row">
         <!-- Single Product Page Content Start -->
         <div class="col-lg-12">
            <div class="single-product-page-content">
               <div class="row">
                  <!-- Product Thumbnail Start -->
                  <div class="col-lg-5">
                     <div class="product-thumbnail-wrap">

                        <div class="product-thumb-carousel owl-carousel">
                           @if (Model.MediaFiles != null && Model.MediaFiles.Any())
                           {
                              @* Loop qua tất cả media files *@
                              foreach (var media in Model.MediaFiles.Where(m => m.MediaType == "Image"))
                              {
                                 <div class="single-thumb-item">
                                    <a href="@media.URL" data-lightbox="product-gallery">
                                       <img class="img-fluid"
                                            src="@media.URL"
                                            alt="@Model.Product.ProductName" />
                                    </a>
                                 </div>
                              }
                           }
                           else
                           {
                              @* No image fallback *@
                              <div class="single-thumb-item">
                                 <a href="#">
                                    <img class="img-fluid"
                                         src="~/Resources/img/no-image.jpg"
                                         alt="No Image" />
                                 </a>
                              </div>
                           }
                        </div>

                        @* 360 View và Video - Hiển thị riêng nếu có *@
                        @if (Model.MediaFiles != null && Model.MediaFiles.Any(m => m.MediaType == "360View"))
                        {
                           <div class="mt-3">
                              <button class="btn btn-outline-primary" onclick="show360View()">
                                 <i class="fa fa-refresh"></i> View 360°
                              </button>
                           </div>
                        }

                        @if (Model.MediaFiles != null && Model.MediaFiles.Any(m => m.MediaType == "Video"))
                        {
                           var videoUrl = Model.MediaFiles.FirstOrDefault(m => m.MediaType == "Video")?.URL;
                           <div class="mt-3">
                              <a href="@videoUrl" class="btn btn-outline-primary" target="_blank">
                                 <i class="fa fa-play"></i> Watch Video
                              </a>
                           </div>
                        }

                     </div>
                  </div>
                  <!-- Product Thumbnail End -->
                  <!-- Product Details Start -->
                  <div class="col-lg-7 mt-5 mt-lg-0">
                     <div class="product-details">

                        @*<h2><a href="single-product.html">Crown Summit Backpack</a></h2>

                           <div class="rating">
                              <i class="fa fa-star"></i>
                              <i class="fa fa-star"></i>
                              <i class="fa fa-star"></i>
                              <i class="fa fa-star-half"></i>
                              <i class="fa fa-star-o"></i>
                           </div>

                           <span class="price">$52.00</span>

                           <div class="product-info-stock-sku">
                              <span class="product-stock-status">In Stock</span>
                              <span class="product-sku-status ml-5"><strong>SKU</strong> MH03</span>
                           </div>*@

                        <h2>
                           <a href="@Url.Action("Details", "Shop", new { id = Model.Product.ProductID })">
                              @Model.Product.ProductName
                           </a>
                        </h2>

                        @* Rating - Dynamic *@
                        <div class="rating">
                           @if (Model.AverageRating > 0)
                           {
                              @* Full stars *@
                              for (int i = 1; i <= Math.Floor(Model.AverageRating); i++)
                              {
                                 <i class="fa fa-star"></i>
                              }

                              @* Half star *@
                              if (Model.AverageRating % 1 >= 0.5m)
                              {
                                 <i class="fa fa-star-half"></i>
                              }

                              @* Empty stars *@
                              for (int i = (int)Math.Ceiling(Model.AverageRating); i < 5; i++)
                              {
                                 <i class="fa fa-star-o"></i>
                              }

                              <span class="ml-2">(@Model.TotalReviews reviews)</span>
                           }
                           else
                           {
                              @* No reviews yet *@
                              for (int i = 0; i < 5; i++)
                              {
                                 <i class="fa fa-star-o"></i>
                              }
                              <span class="ml-2">(No reviews yet)</span>
                           }
                        </div>

                        @* Price - Hiển thị range nếu có nhiều variants *@
                        @{
                           var minPrice = Model.Product.BasePrice + Model.Variants.Min(v => v.AdditionalPrice);
                           var maxPrice = Model.Product.BasePrice + Model.Variants.Max(v => v.AdditionalPrice);
                        }

                        <span class="price">
                           @if (minPrice == maxPrice)
                           {
                              @minPrice.ToString("N0") <text>VND</text>
                           }
                           else
                           {
                              @minPrice.ToString("N0") <text>-</text> @maxPrice.ToString("N0") <text>VND</text>
                           }
                        </span>

                        @* Stock & SKU - Sẽ update khi chọn variant *@
                        <div class="product-info-stock-sku">
                           <span class="product-stock-status" id="stock-status">
                              @if (Model.Variants.Any(v => v.StockQuantity > 0))
                              {
                                 <span class="text-success">In Stock</span>
                              }
                              else
                              {
                                 <span class="text-danger">Out of Stock</span>
                              }
                           </span>
                           <span class="product-sku-status ml-5">
                              <strong>SKU:</strong> <span id="selected-sku">Select options</span>
                           </span>
                        </div>

                        <p class="products-desc">
                           @Model.Product.Description
                        </p>

                        @*<div class="product-quantity d-flex align-items-center">
                              <div class="quantity-field">
                                 <label for="qty">Qty</label>
                                 <input type="number" id="qty" min="1" max="100" value="1" />
                              </div>
                              <a href="single-product.html" class="btn btn-add-to-cart">Add to Cart</a>
                           </div>
                           <div class="product-btn-group">
                              <a href="single-product.html" class="btn btn-add-to-cart btn-whislist">
                                 + Add to Wishlist
                              </a>
                           </div>*@

                        @if (Model.Variants != null && Model.Variants.Any())
                        {
                           <div class="product-variants mb-3">
                              @* Metal Type Selection *@
                              @if (Model.Variants.Select(v => v.MetalType).Distinct().Count() > 1)
                              {
                                 <div class="variant-option mb-3">
                                    <label><strong>Metal Type:</strong></label>
                                    <div class="variant-buttons">
                                       @foreach (var metalType in Model.Variants.Select(v => v.MetalType).Distinct())
                                       {
                                          <button type="button"
                                                  class="btn btn-outline-secondary btn-sm metal-type-btn"
                                                  data-metal="@metalType"
                                                  onclick="filterVariants()">
                                             @metalType
                                          </button>
                                       }
                                    </div>
                                 </div>
                              }

                              @* Ring Size Selection *@
                              @if (Model.Variants.Any(v => !string.IsNullOrEmpty(v.RingSize)))
                              {
                                 <div class="variant-option mb-3">
                                    <label><strong>Ring Size:</strong></label>
                                    <select id="ring-size-select" class="form-control" onchange="filterVariants()">
                                       <option value="">Select Size</option>
                                       @foreach (var size in Model.Variants.Where(v => !string.IsNullOrEmpty(v.RingSize))
                                                                           .Select(v => v.RingSize).Distinct())
                                       {
                                          <option value="@size">@size</option>
                                       }
                                    </select>
                                 </div>
                              }

                              @* Chain Length Selection *@
                              @if (Model.Variants.Any(v => !string.IsNullOrEmpty(v.ChainLength)))
                              {
                                 <div class="variant-option mb-3">
                                    <label><strong>Chain Length:</strong></label>
                                    <select id="chain-length-select" class="form-control" onchange="filterVariants()">
                                       <option value="">Select Length</option>
                                       @foreach (var length in Model.Variants.Where(v => !string.IsNullOrEmpty(v.ChainLength))
                                                                             .Select(v => v.ChainLength).Distinct())
                                       {
                                          <option value="@length">@length</option>
                                       }
                                    </select>
                                 </div>
                              }

                              @* Final Variant Selection (Hidden) *@
                              <input type="hidden" id="selected-variant-id" value="" />
                              <div id="variant-price" class="mb-2" style="display:none;">
                                 <strong>Price: </strong>
                                 <span class="text-primary" style="font-size: 1.2em;"></span>
                              </div>
                           </div>
                        }

                        @* QUANTITY & ADD TO CART *@
                        <div class="product-quantity d-flex align-items-center">
                           <div class="quantity-field">
                              <label for="qty">Qty</label>
                              <input type="number" id="qty" min="1" max="100" value="1" />
                           </div>

                           <button type="button"
                                   class="btn btn-add-to-cart"
                                   id="add-to-cart-btn"
                                   onclick="addToCartDetails()"
                                   disabled>
                              Add to Cart
                           </button>
                        </div>

                        @* WISHLIST BUTTON *@
                        <div class="product-btn-group">
                           <button type="button"
                                   class="btn btn-add-to-cart btn-wishlist"
                                   onclick="addToWishlistDetails()">
                              @if (Model.IsInWishlist)
                              {
                                 <i class="fa fa-heart"></i> <text>In Wishlist</text>
                              }
                              else
                              {
                                 <text>+ Add to Wishlist</text>
                              }
                           </button>
                        </div>

                        @* Gemstone Info - Nếu có *@
                        @if (Model.Gemstones != null && Model.Gemstones.Any())
                        {
                           <div class="gemstone-info mt-4">
                              <h5>Gemstone Details</h5>
                              @foreach (var gem in Model.Gemstones)
                              {
                                 <div class="gemstone-item border p-3 mb-2">
                                    <div class="row">
                                       <div class="col-6"><strong>Cut:</strong> @gem.Cut</div>
                                       <div class="col-6"><strong>Clarity:</strong> @gem.Clarity</div>
                                       <div class="col-6"><strong>Color:</strong> @gem.Color</div>
                                       <div class="col-6"><strong>Carat:</strong> @gem.Carat</div>
                                       @if (!string.IsNullOrEmpty(gem.Origin))
                                       {
                                          <div class="col-6"><strong>Origin:</strong> @gem.Origin</div>
                                       }
                                    </div>
                                 </div>
                              }
                           </div>
                        }

                        @* Certifications - Nếu có *@
                        @if (Model.Certifications != null && Model.Certifications.Any())
                        {
                           <div class="certifications-info mt-4">
                              <h5>Certifications</h5>
                              @foreach (var cert in Model.Certifications)
                              {
                                 <div class="cert-item border p-3 mb-2">
                                    <div><strong>Certifier:</strong> @cert.Certifier</div>
                                    @if (!string.IsNullOrEmpty(cert.CertificateNumber))
                                    {
                                       <div><strong>Certificate #:</strong> @cert.CertificateNumber</div>
                                    }
                                    @if (!string.IsNullOrEmpty(cert.VerificationURL))
                                    {
                                       <div>
                                          <a href="@cert.VerificationURL" target="_blank" class="btn btn-sm btn-outline-primary mt-2">
                                             <i class="fa fa-external-link"></i> Verify Certificate
                                          </a>
                                       </div>
                                    }
                                 </div>
                              }
                           </div>
                        }
                     </div>
                  </div>
                  <!-- Product Details End -->
               </div>

               <div class="row">
                  <div class="col-lg-12">
                     <!-- Product Full Description Start -->
                     <div class="product-full-info-reviews">
                        <!-- Single Product tab Menu -->
                        <nav class="nav" id="nav-tab">
                           <a class="active" id="description-tab" data-toggle="tab" href="#description">Description</a>
                           <a id="reviews-tab" data-toggle="tab" href="#review">Reviews</a>
                        </nav>
                        <!-- Single Product tab Menu -->
                        <!-- Single Product tab Content -->
                        <div class="tab-content" id="nav-tabContent">

                           <div class="tab-pane fade show active" id="description">
                              @* Full Description *@
                              <div class="product-description">
                                 @Html.Raw(Model.Product.Description)
                              </div>

                              @* Product Specifications Table *@
                              <div class="product-specs mt-4">
                                 <h5>Specifications</h5>
                                 <table class="table table-bordered">
                                    <tbody>
                                       <tr>
                                          <th width="30%">Category</th>
                                          <td>@Model.Product.Category.CategoryName</td>
                                       </tr>
                                       <tr>
                                          <th>Base Price</th>
                                          <td>@Model.Product.BasePrice.ToString("N0") VND</td>
                                       </tr>
                                       @if (Model.Variants.Any(v => !string.IsNullOrEmpty(v.MetalType)))
                                       {
                                          <tr>
                                             <th>Available Metals</th>
                                             <td>@string.Join(", ", Model.Variants.Select(v => v.MetalType).Distinct())</td>
                                          </tr>
                                       }
                                       @if (Model.Variants.Any(v => !string.IsNullOrEmpty(v.Purity)))
                                       {
                                          <tr>
                                             <th>Purity</th>
                                             <td>
                                                @string.Join(", ", Model.Variants.Where(v => !string.IsNullOrEmpty(v.Purity))
                                                                              .Select(v => v.Purity).Distinct())
                                             </td>
                                          </tr>
                                       }
                                    </tbody>
                                 </table>
                              </div>
                           </div>

                           <!-- Single Tab Content Start (Reviews) -->
                           <div class="tab-pane fade" id="review" role="tabpanel">
                              <div class="product-review-content">

                                 <!-- Reviews List Section -->
                                 <div class="reviews-list-section mb-5">
                                    <h3>Customer Reviews</h3>
                                    <div id="reviews-container">
                                       <!-- AJAX load reviews here -->
                                       <div class="text-center">
                                          <i class="fa fa-spinner fa-spin fa-2x"></i>
                                          <p>Loading reviews...</p>
                                       </div>
                                    </div>
                                 </div>

                                 <!-- Review Form Section -->
                                 <div class="review-form-section">
                                    <h3>Write Your Review</h3>
                                    <div id="review-form-container">
                                       <!-- Form will be loaded dynamically -->
                                    </div>
                                 </div>

                              </div>
                           </div>
                           <!-- Single Tab Content End -->
                        </div>
                        <!-- Single Product tab Content -->
                     </div>
                     <!-- Product Full Description End -->
                  </div>
               </div>
            </div>
         </div>
         <!-- Single Product Page Content End -->
      </div>
   </div>
</div>
<!--== Page Content Wrapper End ==-->

@section Scripts {
   <script>
        // ===== VARIANTS DATA =====
        var variants = @Html.Raw(Json.Encode(Model.Variants.Select(v => new {
            variantId = v.VariantID,
            sku = v.SKU,
            metalType = v.MetalType,
            ringSize = v.RingSize,
            chainLength = v.ChainLength,
            additionalPrice = v.AdditionalPrice,
            stockQuantity = v.StockQuantity,
            basePrice = Model.Product.BasePrice
        })));

        var selectedVariant = null;

        // ===== FILTER VARIANTS =====
        function filterVariants() {
            var metalType = $('.metal-type-btn.active').data('metal');
            var ringSize = $('#ring-size-select').val();
            var chainLength = $('#chain-length-select').val();

            // Filter variants based on selections
            var filtered = variants.filter(function(v) {
                var match = true;
                if (metalType && v.metalType != metalType) match = false;
                if (ringSize && v.ringSize != ringSize) match = false;
                if (chainLength && v.chainLength != chainLength) match = false;
                return match;
            });

            // If only one variant matches, select it
            if (filtered.length === 1) {
                selectedVariant = filtered[0];
                updateProductInfo(selectedVariant);
            } else if (filtered.length === 0) {
                alert('No variant available for selected options');
                selectedVariant = null;
                $('#add-to-cart-btn').prop('disabled', true);
            } else {
                selectedVariant = null;
                $('#add-to-cart-btn').prop('disabled', true);
            }
        }

        // ===== UPDATE PRODUCT INFO =====
        function updateProductInfo(variant) {
            if (!variant) return;

            // Update SKU
            $('#selected-sku').text(variant.sku);

            // Update Price
            var finalPrice = variant.basePrice + variant.additionalPrice;
            $('#variant-price span').text(finalPrice.toLocaleString() + ' VND');
            $('#variant-price').show();

            // Update Stock
            if (variant.stockQuantity > 0) {
                $('#stock-status').html('<span class="text-success">In Stock (' + variant.stockQuantity + ')</span>');
                $('#add-to-cart-btn').prop('disabled', false);
                $('#qty').attr('max', variant.stockQuantity);
            } else {
                $('#stock-status').html('<span class="text-danger">Out of Stock</span>');
                $('#add-to-cart-btn').prop('disabled', true);
            }

            // Store selected variant ID
            $('#selected-variant-id').val(variant.variantId);
        }

        // ===== METAL TYPE BUTTON CLICK =====
        $(document).on('click', '.metal-type-btn', function() {
            $('.metal-type-btn').removeClass('active');
            $(this).addClass('active');
            filterVariants();
        });

        // ===== ADD TO CART =====
        function addToCartDetails() {
            var variantId = $('#selected-variant-id').val();
            var quantity = parseInt($('#qty').val()) || 1;

            if (!variantId) {
                alert('Please select product options');
                return;
            }
            // Disable button để tránh double click
            $('#add-to-cart-btn').prop('disabled', true).text('Adding...');

            $.ajax({
                url: '@Url.Action("AddToCart", "Cart")',
                type: 'POST',
                data: {
                    variantId: variantId,
                    quantity: quantity
                },
                success: function(response) {
                    if (response.success) {
                        // Update cart count in navbar
                        if (window.updateCartCount) {
                            window.updateCartCount();
                        }

                        // Show success message
                        alert('Product added to cart successfully!');

                        // Reset button
                        $('#add-to-cart-btn').prop('disabled', false).text('Add to Cart');
                    } else {
                        alert(response.message);
                        $('#add-to-cart-btn').prop('disabled', false).text('Add to Cart');
                    }
                },
                error: function() {
                    alert('Error adding to cart. Please try again.');
                    $('#add-to-cart-btn').prop('disabled', false).text('Add to Cart');
                }
            });
        }

        // ===== ADD TO WISHLIST =====
        function addToWishlistDetails() {
            var variantId = $('#selected-variant-id').val();

            if (!variantId) {
                // Lấy variant đầu tiên
                if (variants && variants.length > 0) {
                    variantId = variants[0].variantId;
                } else {
                    alert('Please select product options');
                    return;
                }
            }
            $.ajax({
                url: '@Url.Action("Add", "Wishlist")',
                type: 'POST',
                data: { variantId: variantId },
                success: function(response) {
                    if (response.success) {
                        if (window.updateWishlistCount) {
                            window.updateWishlistCount();
                        }
                        alert('Added to wishlist!');
                    } else {
                        alert(response.message || 'Error adding to wishlist');
                    }
                },
                error: function() {
                    alert('Please login to add items to wishlist');
                }
            });
        }

         // =========================================
         // REVIEWS SECTION - PHASE 9
         // =========================================

         var currentProductId = @Model.Product.ProductID;

         // ===== LOAD REVIEWS ON PAGE LOAD =====
         $(document).ready(function() {
             loadReviews();
             loadReviewForm();
         });

         // ===== LOAD ALL REVIEWS FOR PRODUCT =====
         function loadReviews() {
             $.ajax({
                 url: '@Url.Action("GetProductReviews", "Reviews")',
                 type: 'GET',
                 data: { productId: currentProductId },
                 success: function(html) {
                     $('#reviews-container').html(html);
                 },
                 error: function() {
                     $('#reviews-container').html('<p class="text-danger">Error loading reviews.</p>');
                 }
             });
         }

         // ===== LOAD REVIEW FORM =====
         function loadReviewForm() {
             $.ajax({
                 url: '@Url.Action("CanUserReview", "Reviews")',
                 type: 'GET',
                 data: { productId: currentProductId },
                 success: function(response) {
                     if (response.canReview) {
                         showReviewForm();
                     } else {
                         showCannotReviewMessage(response.message, response.reason);
                     }
                 },
                 error: function() {
                     $('#review-form-container').html('<p class="text-danger">Error loading form.</p>');
                 }
             });
         }

         // ===== SHOW REVIEW FORM =====
         function showReviewForm() {
             var formHtml = `
                 <form id="review-form" class="review-form">
                     @Html.AntiForgeryToken()

                     <div class="form-group">
                         <label>Your Rating <span class="text-danger">*</span></label>
                         <div class="rating-input">
                             <i class="fa fa-star-o star-rating" data-rating="1"></i>
                             <i class="fa fa-star-o star-rating" data-rating="2"></i>
                             <i class="fa fa-star-o star-rating" data-rating="3"></i>
                             <i class="fa fa-star-o star-rating" data-rating="4"></i>
                             <i class="fa fa-star-o star-rating" data-rating="5"></i>
                         </div>
                         <input type="hidden" id="rating-value" name="rating" value="0" />
                     </div>

                     <div class="form-group">
                         <label for="review-title">Review Title (Optional)</label>
                         <input type="text" class="form-control" id="review-title"
                                name="title" placeholder="Give your review a title" maxlength="255" />
                     </div>

                     <div class="form-group">
                         <label for="your-review">Your Review (Optional)</label>
                         <textarea class="form-control" id="your-review" name="body"
                                   rows="5" placeholder="Write your review here..."></textarea>
                     </div>

                     <button type="button" class="btn btn-add-to-cart" onclick="submitReview()">
                         Submit Review
                     </button>
                 </form>
             `;
             $('#review-form-container').html(formHtml);

             // Re-bind star rating click event
             bindStarRatingEvents();
         }

         // ===== SHOW CANNOT REVIEW MESSAGE =====
         function showCannotReviewMessage(message, reason) {
             var messageHtml = `
                 <div class="alert alert-info">
                     <i class="fa fa-info-circle"></i> ${message}
                 </div>
             `;

             if (reason === 'not_authenticated') {
                 messageHtml = `
                     <div class="alert alert-warning">
                         <i class="fa fa-exclamation-triangle"></i> ${message}
                         <a href="@Url.Action("Login", "Account")" class="btn btn-sm btn-primary ml-3">
                             Login Now
                         </a>
                     </div>
                 `;
             } else if (reason === 'already_reviewed') {
                 // Load user's existing review
                 loadUserReview();
                 return;
             }

             $('#review-form-container').html(messageHtml);
         }

         // ===== LOAD USER'S EXISTING REVIEW =====
         function loadUserReview() {
             $.ajax({
                 url: '@Url.Action("GetUserReview", "Reviews")',
                 type: 'GET',
                 data: { productId: currentProductId },
                 success: function(response) {
                     if (response.hasReview) {
                         showExistingReview(response.review);
                     }
                 }
             });
         }

         // ===== SHOW USER'S EXISTING REVIEW =====
         function showExistingReview(review) {
             var stars = '';
             for (var i = 0; i < 5; i++) {
                 stars += i < review.rating
                     ? '<i class="fa fa-star text-warning"></i>'
                     : '<i class="fa fa-star-o"></i>';
             }

             var reviewHtml = `
                 <div class="alert alert-success">
                     <h5>Your Review</h5>
                     <div class="mb-2">${stars}</div>
                     ${review.title ? '<h6>' + review.title + '</h6>' : ''}
                     ${review.body ? '<p>' + review.body + '</p>' : ''}
                     <small class="text-muted">Posted on ${new Date(review.createdAt).toLocaleDateString()}</small>
                     <div class="mt-3">
                         <a href="@Url.Action("Edit", "Reviews")?id=${review.reviewId}"
                            class="btn btn-sm btn-primary">
                             <i class="fa fa-edit"></i> Edit Review
                         </a>
                         <button type="button" class="btn btn-sm btn-danger"
                                 onclick="deleteReview(${review.reviewId})">
                             <i class="fa fa-trash"></i> Delete Review
                         </button>
                     </div>
                 </div>
             `;
             $('#review-form-container').html(reviewHtml);
         }

         // ===== BIND STAR RATING EVENTS =====
         function bindStarRatingEvents() {
             $('.star-rating').off('click').on('click', function() {
                 var rating = $(this).data('rating');
                 $('#rating-value').val(rating);

                 // Update stars display
                 $('.star-rating').each(function(index) {
                     if (index < rating) {
                         $(this).removeClass('fa-star-o').addClass('fa-star').css('color', '#f39c12');
                     } else {
                         $(this).removeClass('fa-star').addClass('fa-star-o').css('color', '#ccc');
                     }
                 });
             });

             // Hover effect
             $('.star-rating').hover(
                 function() {
                     var rating = $(this).data('rating');
                     $('.star-rating').each(function(index) {
                         if (index < rating) {
                             $(this).css('color', '#f39c12');
                         }
                     });
                 },
                 function() {
                     var currentRating = $('#rating-value').val();
                     $('.star-rating').each(function(index) {
                         if (index < currentRating) {
                             $(this).css('color', '#f39c12');
                         } else {
                             $(this).css('color', '#ccc');
                         }
                     });
                 }
             );
         }

         // ===== SUBMIT REVIEW =====
         function submitReview() {
             var rating = $('#rating-value').val();
             var title = $('#review-title').val();
             var body = $('#your-review').val();

             if (rating == 0) {
                 alert('Please select a rating (1-5 stars)');
                 return;
             }

             // Get AntiForgeryToken
             var token = $('input[name="__RequestVerificationToken"]').val();

             $.ajax({
                 url: '@Url.Action("Create", "Reviews")',
                 type: 'POST',
                 data: {
                     __RequestVerificationToken: token,
                     productId: currentProductId,
                     rating: rating,
                     title: title,
                     body: body
                 },
                 success: function(response) {
                     if (response.success) {
                         alert(response.message);
                         // Reload reviews and form
                         loadReviews();
                         loadReviewForm();
                     } else {
                         alert(response.message);
                     }
                 },
                 error: function(xhr) {
                     if (xhr.status === 401) {
                         alert('Please login to submit a review');
                         window.location.href = '@Url.Action("Login", "Account")';
                     } else {
                         alert('Error submitting review. Please try again.');
                     }
                 }
             });
         }

         // ===== DELETE REVIEW =====
         function deleteReview(reviewId) {
             if (!confirm('Are you sure you want to delete this review?')) {
                 return;
             }

             var token = $('input[name="__RequestVerificationToken"]').val();

             $.ajax({
                 url: '@Url.Action("Delete", "Reviews")',
                 type: 'POST',
                 data: {
                     __RequestVerificationToken: token,
                     id: reviewId
                 },
                 success: function(response) {
                     if (response.success) {
                         alert(response.message);
                         // Reload reviews and form
                         loadReviews();
                         loadReviewForm();
                     } else {
                         alert(response.message);
                     }
                 },
                 error: function() {
                     alert('Error deleting review. Please try again.');
                 }
             });
         }


        // ===== 360 VIEW =====
        function show360View() {
            // TODO: Implement 360 view modal
            alert('360 View coming soon');
        }
   </script>
}
